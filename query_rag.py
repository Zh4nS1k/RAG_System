from __future__ import annotations

from typing import Iterable

from rag_pipeline import collect_chunk_metadata, query_rag, summarise_hits


def ask_question(question: str, k: int = 5) -> None:
    print("üîç –í–æ–ø—Ä–æ—Å:", question)
    try:
        answer, chunks = query_rag(question, top_k=k)
    except FileNotFoundError as exc:
        print(f'‚ùå {exc}')
        return

    if not chunks:
        print("‚ö†Ô∏è –ü–æ–¥—Ö–æ–¥—è—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å.")
        return

    hits = summarise_hits(chunks)
    print("üìö –ù–∞–π–¥–µ–Ω—ã —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö:")
    for name, count in hits.items():
        print(f" ‚Ä¢ {name}: {count} —Ñ—Ä–∞–≥–º–µ–Ω—Ç(–æ–≤)")

    print("\nü§ñ –û—Ç–≤–µ—Ç:")
    print(answer)

    print("\nüîé –ò—Å—Ç–æ—á–Ω–∏–∫–∏:")
    for chunk in collect_chunk_metadata(chunks):
        name = chunk.get("document_name") or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç"
        page = chunk.get("page_number")
        page_info = f", —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}" if page else ""
        print(f" ‚Ä¢ {name}{page_info}")

    print("\n" + "=" * 80 + "\n")


if __name__ == "__main__":
    questions = [
        "–ö–∞–∫–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤–∏–¥—ã –¥–æ–≥–æ–≤–æ—Ä–æ–≤ –≤ –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–º –ø—Ä–∞–≤–µ –†–µ—Å–ø—É–±–ª–∏–∫–∏ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω?",
        "–ö–∞–∫–∏–µ –Ω–∞–ª–æ–≥–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ?",
        "–ö–∞–∫–∏–µ –ø—Ä–∞–≤–∞ –∏–º–µ—é—Ç —Ä–∞–±–æ—Ç–Ω–∏–∫–∏ –ø–æ –¢—Ä—É–¥–æ–≤–æ–º—É –∫–æ–¥–µ–∫—Å—É –†–ö?",
        "–ß—Ç–æ —Å—á–∏—Ç–∞–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º –ø—Ä–∞–≤–æ–Ω–∞—Ä—É—à–µ–Ω–∏–µ–º –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ?",
    ]

    for q in questions:
        ask_question(q, k=5)
